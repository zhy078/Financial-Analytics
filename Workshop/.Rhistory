knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
# Load tidyverse package
library(tidyverse)
# Load caTools package for data partitioning
library(caTools)
# Load ROSE package for data balancing
library(ROSE)
# Import our data and save it to variable creditdf
creditdf <- read.csv("CreditDefault.csv", stringsAsFactors = TRUE)
# View the first three rows with head()
head(creditdf, 3)
# Check the structure of the variables in your data by using str() function
str(creditdf)
# Check the summary of the dataset
summary(creditdf)
# Find the indices of car0 entries and assign these indices to index_error
index_error <- which(creditdf$purpose == "car0")
# Correct the data entry error
creditdf$purpose[index_error] = "car"
summary(creditdf)
# Update the levels in purpose column by using factor() function
creditdf$purpose <- factor(creditdf$purpose)
# Check the summary of the updated dataset
summary(creditdf)
# Load plyr package for data encoding
library(plyr)
# Apply label encoding to credit_history
creditdf$credit_history <- revalue(creditdf$credit_history, c("critical" = "1", "poor" = "2", "good" = "3", "very good" = "4", "perfect" = "5"))
# Save credit_history as a numerical variabel
creditdf$credit_history <- as.numeric(creditdf$credit_history)
# Apply label encoding to job
creditdf$job <- revalue(creditdf$job, c("unemployed" = "1", "unskilled" = "2", "skilled" = "3", "management" = "4"))
# Save job as a numerical variabel
creditdf$job <- as.numeric(creditdf$job)
# Check the summary of the updated dataset
summary(creditdf)
# Apply label encoding to phone
creditdf$phone <- revalue(creditdf$phone, c("yes" = "1", "no" = "0"))
# Save credit_history as a numerical variabel
creditdf$phone <- as.numeric(creditdf$phone)
# Check the summary of the updated dataset
summary(creditdf)
# Install mltools package
#install.packages("mltools")
# Load mltools package
library(mltools)
# Load data.table package
library(data.table)
# Take a copy of the target variable
target_var <- creditdf$default
# Remove target variable before one hot encoding
creditdf$default <- NULL
# Apply one hot encoding
creditdf <- one_hot(as.data.table(creditdf))
# Add target variable
creditdf$default <- target_var
# Check the summary of the updated dataset
summary(creditdf)
View(creditdf)
View(creditdf)
# Set a seed of 10 by using set.seed() function
set.seed(10)
# Generate split vector to partition the data into training and test sets with training ratio of 0.70
split <- sample.split(creditdf$default, SplitRatio = 0.70)
# Generate the training and test sets by subsetting the data records from actual dataset
training = subset(creditdf, split == TRUE)
test = subset(creditdf, split == FALSE)
# Apply oversampling technique
oversampled <- ovun.sample(default ~ ., data = training, method = "over", p=0.4, seed=1)$data
# Apply oversampling technique
oversampled <- ovun.sample(default ~ ., data = training, method = "over", p=0.4, seed=1)$data
View(training)
View(training)
names(training)[names(training) == "purpose_furniture/appliances"] <- "purpose_furniture"
# Apply oversampling technique
oversampled <- ovun.sample(default ~ ., data = training, method = "over", p=0.4, seed=1)$data
# Apply both over and under sampling technique
bothsampled <- ovun.sample(default ~ ., data = training, method = "both", p=0.4, seed=1)$data
# Check the distribution of defaults in original training set
table(training$default)
prop.table(table(training$default))
# Use barplot() function to plot the distribution of defaults
barplot(table(training$default), xlab= "Classes", ylab="Frequency", ylim=c(0,600))
# Check the distribution of defaults in oversampled training set
table(oversampled$default)
prop.table(table(oversampled$default))
# Plot the distribution by using barplot() function
barplot(table(oversampled$default), xlab= "Classes", ylab="Frequency",  ylim=c(0,600))
# Check the distribution of defaults in bothsampled training set
table(bothsampled$default)
prop.table(table(bothsampled$default))
# Plot the distribution by using barplot() function
barplot(table(bothsampled$default), xlab= "Classes", ylab="Frequency",  ylim=c(0,600))
knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
# Load tidyverse package
library(tidyverse)
# Load caTools package for data partitioning
library(caTools)
# Load ROSE package for data balancing
library(ROSE)
# Import our data and save it to variable creditdf
creditdf <- read.csv("CreditDefault.csv", stringsAsFactors = TRUE)
# Check the structure of the variables in your data by using str() function
str(creditdf)
# Check the summary of the dataset
summary(creditdf)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
# Load tidyverse package
library(tidyverse)
# Load caTools package for data partitioning
library(caTools)
# Load ROSE package for data balancing
library(ROSE)
# Import our data and save it to variable creditdf
creditdf <- read.csv("CreditDefault.csv", stringsAsFactors = TRUE)
# Check the structure of the variables in your data by using str() function
str(creditdf)
# Check the summary of the dataset
summary(creditdf)
# If plyr pachage is not installed before:
# install.packages("plyr")
# Load plyr package for data encoding
library(plyr)
# Apply label encoding to credit_history
creditdf$credit_history <- revalue(creditdf$credit_history, c("critical" = "1", "poor" = "2", "good" = "3", "very good" = "4", "perfect" = "5"))
# Save credit_history as a numerical variable
creditdf$credit_history <- as.numeric(creditdf$credit_history)
# Apply label encoding to job
creditdf$job <- revalue(creditdf$job, c("unemployed" = "1", "unskilled" = "2", "skilled" = "3", "management" = "4"))
# Save job as a numeric variable
creditdf$job <- as.numeric(creditdf$job)
# Check the summary of the updated dataset
summary(creditdf)
# Apply label encoding to phone
creditdf$phone <- revalue(creditdf$phone, c("yes" = "1", "no" = "0"))
# Save credit_history as a numerical variabel
creditdf$phone <- as.numeric(creditdf$phone)
# Check the summary of the updated dataset
summary(creditdf)
# Install mltools package
#install.packages("mltools")
# Load mltools package
library(mltools)
# Load data.table package
library(data.table)
# Take a copy of the target variable
# target_var <- creditdf$default
# Remove target variable before one hot encoding
# creditdf$default <- NULL
# Apply one hot encoding
creditdf <- one_hot(as.data.table(creditdf), cols = "purpose")
# Add target variable
# creditdf$default <- target_var
# Check the summary of the updated dataset
summary(creditdf)
# Install mltools package
#install.packages("mltools")
# Load mltools package
library(mltools)
# Load data.table package
library(data.table)
# Take a copy of the target variable
# target_var <- creditdf$default
# Remove target variable before one hot encoding
# creditdf$default <- NULL
# Apply one hot encoding
creditdf <- one_hot(as.data.table(creditdf), cols = "purpose", "default")
# Install mltools package
#install.packages("mltools")
# Load mltools package
library(mltools)
# Load data.table package
library(data.table)
# Take a copy of the target variable
# target_var <- creditdf$default
# Remove target variable before one hot encoding
# creditdf$default <- NULL
# Apply one hot encoding
creditdf <- one_hot(as.data.table(creditdf), cols = c("purpose", "default"))
# Install mltools package
#install.packages("mltools")
# Load mltools package
library(mltools)
# Load data.table package
library(data.table)
# Take a copy of the target variable
# target_var <- creditdf$default
# Remove target variable before one hot encoding
# creditdf$default <- NULL
# Apply one hot encoding
creditdf <- one_hot(as.data.table(creditdf), cols = c("purpose", "default"))
# Install mltools package
#install.packages("mltools")
# Load mltools package
library(mltools)
# Load data.table package
library(data.table)
# Take a copy of the target variable
# target_var <- creditdf$default
# Remove target variable before one hot encoding
# creditdf$default <- NULL
# Apply one hot encoding
creditdf <- one_hot(as.data.table(creditdf), cols = "purpose" + "default")
# Install mltools package
#install.packages("mltools")
# Load mltools package
library(mltools)
# Load data.table package
library(data.table)
# Take a copy of the target variable
# target_var <- creditdf$default
# Remove target variable before one hot encoding
# creditdf$default <- NULL
# Apply one hot encoding
creditdf <- one_hot(as.data.table(creditdf), cols = "purpose", "default")
knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
# Load tidyverse package
library(tidyverse)
# Load caTools package for data partitioning
library(caTools)
# Load ROSE package for data balancing
library(ROSE)
# Import our data and save it to variable creditdf
creditdf <- read.csv("CreditDefault.csv", stringsAsFactors = TRUE)
# Check the structure of the variables in your data by using str() function
str(creditdf)
# Check the summary of the dataset
summary(creditdf)
# If plyr pachage is not installed before:
# install.packages("plyr")
# Load plyr package for data encoding
library(plyr)
# Apply label encoding to credit_history
creditdf$credit_history <- revalue(creditdf$credit_history, c("critical" = "1", "poor" = "2", "good" = "3", "very good" = "4", "perfect" = "5"))
# Save credit_history as a numerical variable
creditdf$credit_history <- as.numeric(creditdf$credit_history)
# Apply label encoding to job
creditdf$job <- revalue(creditdf$job, c("unemployed" = "1", "unskilled" = "2", "skilled" = "3", "management" = "4"))
# Save job as a numeric variable
creditdf$job <- as.numeric(creditdf$job)
# Apply label encoding to phone
creditdf$phone <- revalue(creditdf$phone, c("yes" = "1", "no" = "0"))
# Save credit_history as a numerical variabel
creditdf$phone <- as.numeric(creditdf$phone)
# Check the summary of the updated dataset
summary(creditdf)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
# Load tidyverse package
library(tidyverse)
# Load caTools package for data partitioning
library(caTools)
# Load ROSE package for data balancing
library(ROSE)
# Import our data and save it to variable creditdf
creditdf <- read.csv("CreditDefault.csv", stringsAsFactors = TRUE)
# Check the structure of the variables in your data by using str() function
str(creditdf)
# Check the summary of the dataset
summary(creditdf)
# If plyr pachage is not installed before:
# install.packages("plyr")
# Load plyr package for data encoding
library(plyr)
# Apply label encoding to credit_history
creditdf$credit_history <- revalue(creditdf$credit_history, c("critical" = "1", "poor" = "2", "good" = "3", "very good" = "4", "perfect" = "5"))
# Save credit_history as a numerical variable
creditdf$credit_history <- as.numeric(creditdf$credit_history)
# Apply label encoding to job
creditdf$job <- revalue(creditdf$job, c("unemployed" = "1", "unskilled" = "2", "skilled" = "3", "management" = "4"))
# Save job as a numeric variable
creditdf$job <- as.numeric(creditdf$job)
# Apply label encoding to phone
creditdf$phone <- revalue(creditdf$phone, c("yes" = "1", "no" = "0"))
# Save credit_history as a numerical variabel
creditdf$phone <- as.numeric(creditdf$phone)
# Check the summary of the updated dataset
summary(creditdf)
# Install mltools package
#install.packages("mltools")
# Load mltools package
library(mltools)
# Load data.table package
library(data.table)
# Take a copy of the target variable
# target_var <- creditdf$default
# Remove target variable before one hot encoding
# creditdf$default <- NULL
# Apply one hot encoding
creditdf <- one_hot(as.data.table(creditdf), cols = "purpose", "default")
# Install mltools package
#install.packages("mltools")
# Load mltools package
library(mltools)
# Load data.table package
library(data.table)
# Take a copy of the target variable
# target_var <- creditdf$default
# Remove target variable before one hot encoding
# creditdf$default <- NULL
# Apply one hot encoding
creditdf <- one_hot(as.data.table(creditdf), cols = "purpose" + "default")
# Install mltools package
#install.packages("mltools")
# Load mltools package
library(mltools)
# Load data.table package
library(data.table)
# Take a copy of the target variable
# target_var <- creditdf$default
# Remove target variable before one hot encoding
# creditdf$default <- NULL
# Apply one hot encoding
creditdf <- one_hot(as.data.table(creditdf), cols = c("purpose", "default"))
# Add target variable
# creditdf$default <- target_var
# Check the summary of the updated dataset
summary(creditdf)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
# Load tidyverse package
library(tidyverse)
# Load caTools package for data partitioning
library(caTools)
# Load ROSE package for data balancing
library(ROSE)
# Import our data and save it to variable creditdf
creditdf <- read.csv("CreditDefault.csv", stringsAsFactors = TRUE)
# Check the structure of the variables in your data by using str() function
str(creditdf)
# Check the summary of the dataset
summary(creditdf)
# If plyr pachage is not installed before:
# install.packages("plyr")
# Load plyr package for data encoding
library(plyr)
# Apply label encoding to credit_history
creditdf$credit_history <- revalue(creditdf$credit_history, c("critical" = "1", "poor" = "2", "good" = "3", "very good" = "4", "perfect" = "5"))
# Save credit_history as a numerical variable
creditdf$credit_history <- as.numeric(creditdf$credit_history)
# Apply label encoding to job
creditdf$job <- revalue(creditdf$job, c("unemployed" = "1", "unskilled" = "2", "skilled" = "3", "management" = "4"))
# Save job as a numeric variable
creditdf$job <- as.numeric(creditdf$job)
# Apply label encoding to phone
creditdf$phone <- revalue(creditdf$phone, c("yes" = "1", "no" = "0"))
# Save credit_history as a numerical variabel
creditdf$phone <- as.numeric(creditdf$phone)
# Check the summary of the updated dataset
summary(creditdf)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
# Load tidyverse package
library(tidyverse)
# Load caTools package for data partitioning
library(caTools)
# Load ROSE package for data balancing
library(ROSE)
# Import our data and save it to variable creditdf
creditdf <- read.csv("CreditDefault.csv", stringsAsFactors = TRUE)
# Check the structure of the variables in your data by using str() function
str(creditdf)
# Check the summary of the dataset
summary(creditdf)
# If plyr pachage is not installed before:
# install.packages("plyr")
# Load plyr package for data encoding
library(plyr)
# Apply label encoding to credit_history
creditdf$credit_history <- revalue(creditdf$credit_history, c("critical" = "1", "poor" = "2", "good" = "3", "very good" = "4", "perfect" = "5"))
# Save credit_history as a numerical variable
creditdf$credit_history <- as.numeric(creditdf$credit_history)
# Apply label encoding to job
creditdf$job <- revalue(creditdf$job, c("unemployed" = "1", "unskilled" = "2", "skilled" = "3", "management" = "4"))
# Save job as a numeric variable
creditdf$job <- as.numeric(creditdf$job)
# Apply label encoding to phone
creditdf$phone <- revalue(creditdf$phone, c("yes" = "1", "no" = "0"))
# Save credit_history as a numerical variabel
creditdf$phone <- as.numeric(creditdf$phone)
# Check the summary of the updated dataset
summary(creditdf)
# Install mltools package
#install.packages("mltools")
# Load mltools package
library(mltools)
# Load data.table package
library(data.table)
# Take a copy of the target variable
# target_var <- creditdf$default
# Remove target variable before one hot encoding
# creditdf$default <- NULL
# Apply one hot encoding
creditdf <- one_hot(as.data.table(creditdf), cols = "purpose")
# Add target variable
# creditdf$default <- target_var
# Check the summary of the updated dataset
summary(creditdf)
# Check the structure of the variables in your data by using str() function
str(creditdf)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
# Load tidyverse package
library(tidyverse)
# Load caTools package for data partitioning
library(caTools)
# Load ROSE package for data balancing
library(ROSE)
# Import our data and save it to variable creditdf
creditdf <- read.csv("CreditDefault.csv", stringsAsFactors = TRUE)
# Check the structure of the variables in your data by using str() function
str(creditdf)
# If plyr pachage is not installed before:
# install.packages("plyr")
# Load plyr package for data encoding
library(plyr)
# Apply label encoding to credit_history
creditdf$credit_history <- revalue(creditdf$credit_history, c("critical" = "1", "poor" = "2", "good" = "3", "very good" = "4", "perfect" = "5"))
# Save credit_history as a numerical variable
creditdf$credit_history <- as.numeric(creditdf$credit_history)
# Apply label encoding to job
creditdf$job <- revalue(creditdf$job, c("unemployed" = "1", "unskilled" = "2", "skilled" = "3", "management" = "4"))
# Save job as a numeric variable
creditdf$job <- as.numeric(creditdf$job)
# Apply label encoding to phone
creditdf$phone <- revalue(creditdf$phone, c("yes" = "1", "no" = "0"))
# Save credit_history as a numerical variabel
creditdf$phone <- as.numeric(creditdf$phone)
# Check the summary of the updated dataset
summary(creditdf)
# Install mltools package
#install.packages("mltools")
# Load mltools package
library(mltools)
# Load data.table package
library(data.table)
# Apply one hot encoding
creditdf <- one_hot(as.data.table(creditdf), cols = "purpose")
# Check the summary of the updated dataset
summary(creditdf)
# Set a seed of 10 by using set.seed() function
set.seed(10)
# Generate split vector to partition the data into training and test sets with training ratio of 0.70
split <- sample.split(creditdf$default, SplitRatio = 0.70)
# Generate the training and test sets by subsetting the data records from actual dataset
training = subset(creditdf, split == TRUE)
test = subset(creditdf, split == FALSE)
# Apply oversampling technique
oversampled <- ovun.sample(default ~ ., data = training, method = "over", p=0.4, seed=1)$data
# Apply both over and under sampling technique
bothsampled <- ovun.sample(default ~ ., data = training, method = "both", p=0.4, seed=1)$data
# Check the distribution of defaults in original training set
table(training$default)
prop.table(table(training$default))
# Use barplot() function to plot the distribution of defaults
barplot(table(training$default), xlab= "Classes", ylab="Frequency", ylim=c(0,600))
# Check the distribution of defaults in oversampled training set
table(oversampled$default)
prop.table(table(oversampled$default))
# Plot the distribution by using barplot() function
barplot(table(oversampled$default), xlab= "Classes", ylab="Frequency",  ylim=c(0,600))
# Check the distribution of defaults in bothsampled training set
table(bothsampled$default)
prop.table(table(bothsampled$default))
# Plot the distribution by using barplot() function
barplot(table(bothsampled$default), xlab= "Classes", ylab="Frequency",  ylim=c(0,600))
# Use barplot() function to plot the distribution of defaults
barplot(table(training$default), xlab= "Classes", ylab="Frequency")
# Use barplot() function to plot the distribution of defaults
barplot(table(training$default), xlab= "Classes", ylab="Frequency", ylim=c(0,600))
# Use barplot() function to plot the distribution of defaults
barplot(table(training$default), xlab= "Classes", ylab="Frequency", ylim=c(0,600))
# Check the distribution of defaults in oversampled training set
table(oversampled$default)
prop.table(table(oversampled$default))
# Plot the distribution by using barplot() function
barplot(table(oversampled$default), xlab= "Classes", ylab="Frequency",  ylim=c(0,600))
# Check the distribution of defaults in bothsampled training set
table(bothsampled$default)
prop.table(table(bothsampled$default))
# Plot the distribution by using barplot() function
barplot(table(bothsampled$default), xlab= "Classes", ylab="Frequency",  ylim=c(0,600))
rnorm(5)
rnorm(5)
set.seed(1)
rnorm(5)
rnorm(5)
rnorm(5)
set.seed(123)
rnorm(5)
rnorm(5)
set.seed(123)
rnorm(5)
