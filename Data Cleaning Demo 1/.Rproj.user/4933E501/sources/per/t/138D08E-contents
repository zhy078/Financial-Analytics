---
title: "Data Cleaning"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
```

In this exercise, we will practise some of the data cleaning techniques. We will mainly use functions from `tidyverse` package. Let's first install and load `tidyverse` package and import our dataset. The data file **survey.csv** was adapted from the survey dataset from the `MASS` package in R. Let's import it using `read_csv()` function from `tidyverse` package.

```{r  message=FALSE}

#install.packages("tidyverse")

# Load tidyverse package
library(tidyverse)

# Import our data and save it as datafile
datafile <- read_csv("survey.csv")

```

Our dataset is imported. Let's check the first five rows by using `head()` function and then view the structure of our data by using `str()` function.

```{r  message=FALSE}

# View the first five rows with head()
# head(filename, n) shows the first n lines of the data file
head(datafile, 5)  

# Check the structure of the variables in your data by using str() function
str(datafile)

```


When we check the structure of the data, we see that some of the variables are stored as characters instead of categorical variables. Next, we will set the correct measurement levels for those variables.

```{r  message=FALSE}

# Set the correct measurement levels for columns Gender, Handedness, Exercise and Smoke by using as.factor() function
datafile$Gender <- as.factor(datafile$Gender)
datafile$Handedness <- as.factor(datafile$Handedness)
datafile$Exercise <- as.factor(datafile$Exercise)
datafile$Smoke <- as.factor(datafile$Smoke)


# Check the structure of the data file again
str(datafile)

```

**Note:** When we import the data file with `read_csv()` function, strings are stored as characters. Instead of converting each chracter variable to categorical variable as we did now, we can use `read.csv()` function. This function will automatically save strings as characters. 


```{r  message=FALSE}

# Import our data and save it to variable datafile
datafile_check <- read.csv("survey.csv")

str(datafile_check)

```

Let's return to our data cleaning task. How many levels do we have in "Gender" column?

* Check the levels in Gender column by using `levels()` function.


```{r message=FALSE}

# Check levels of the Gender column
levels(datafile$Gender)

```

* Correct the data entry errors by replacing "female" with "Female" and "male" with "Male". In order to correct the errors, we need to first find the indices of the entries with incorect values. Then, we should replace them with the correct ones. For this task, we will use `which()` function. This function selects a subset of entries matching a condition.

   First, find the indices of variables with "famele" values and assign these indices to *index_female*

```{r message=FALSE}

# Replace female with Female
#(1) Find the indices of variables with "famele" value
index_female <- which(datafile$Gender == "female")  
```

  Now, replace those entries with "Female".
```{r message=FALSE}

#(2)Replace those entries with "Female"
datafile$Gender[index_female] = "Female"

```


  Repeat the steps (1) and (2) for "male"
```{r message=FALSE}

# Repeat the steps (1) and (2) for male
index_male <- which(datafile$Gender == "male")

datafile$Gender[index_male] <- 'Male'
  
#Check levels of the Gender column now
levels(datafile$Gender)

```


Although we corrected the entry errors in the Gender column, the levels did not change. Hence, we should update the factor levels by using `factor()` function.

```{r message=FALSE}

# We should also update the levels
datafile$Gender <- factor(datafile$Gender)

levels(datafile$Gender)

```

***

Now, we will learn how to handle missing values in R. Let's first check the summary of our data. `summary()` function will provide some statistical information about our data. We can also check whether there are any missing values by analysing the output of `summary()` function.

```{r message=FALSE}

# Check the summary of the data file
summary(datafile)

```


Let's see what happens if we do not remove the missing values.

* Find the average of "Pulse" column, and assign it to variable *avg_pulse*.

```{r message=FALSE}

# Find the average pulse and print it
avg_pulse <- mean(datafile$Pulse)

print(avg_pulse)

```

Let's do the following tasks:

1. Remove records with missing values and assign it to *datafile_new*. For this task, we will use `na.omit()` function which removes the data records with missing values.

```{r message=FALSE}

# Remove records with missing values and assign it to datafile_new
datafile_new <- na.omit(datafile)

```

2. Calculate the number of records removed from the data. For this task, we will use `nrow()` function which counts the number of rows of a data frame.

```{r message=FALSE}

# Calculate the number of records removed from the data
nrow(datafile)-nrow(datafile_new)

```


Instead of removing the records with missing entries, assume we decided to replace missing entries in "Pulse" and "Height" columns with their average values.

```{r message=FALSE}

# Find the average of Pulse by excluding the missing values
avg_pulse <- mean(datafile$Pulse, na.rm = T)
print(avg_pulse)

# Find the average of Height by excluding the missing values
avg_height <- mean(datafile$Height, na.rm = T)
print(avg_height)

```

Replace records with missing values by using `replace_na()` function. This function takes two arguments; the datafile and the list which stores the values to replace missing values.

```{r message=FALSE}

# Replace records with missing values
datafile_replace <- replace_na(datafile, list(Pulse = avg_pulse, Height = avg_height))

#  Remove records with missing values and assign the redacted variable to datafile_removed
datafile_removed <- na.omit(datafile_replace)

# Calculate the number of records removed from the data
nrow(datafile)-nrow(datafile_removed)

```